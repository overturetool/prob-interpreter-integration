class Airport

instance variables
    permission : set of Aircraft := {};
    landed     : set of Aircraft := {};
    inv landed subset permission;


types
  Aircraft = nat
  
 functions  
    permitted: Aircraft * set of Aircraft -> bool
    permitted(a,perm) ==
      a in set perm;
      
    down: Aircraft * set of Aircraft -> bool
    down(a,land) ==
      a in set land;
      
    PreRecordLanding: Aircraft * set of Aircraft * set of Aircraft -> bool
    PreRecordLanding(a,l,p) ==
      permitted(a,p) and not down(a,l)

  operations

    Init()
    ext wr permission
        wr landed
    post permission = {} and landed = {};
    
	public test:() ==> set of Aircraft * set of Aircraft
	 test() == let plane1 = 7 in
	(	 
		Init();
		GivePermission(plane1);
		RecordLanding(plane1);
		RecordTakeOff(plane1);
		let n = NumberWaiting()
			in skip;
		return mk_(permission,landed);
	);
	 
    GivePermission(a : Aircraft) 
    ext wr permission
    pre not permitted(a,permission)
    post permission = permission~ union {a};
    

    RecordLanding(a: Aircraft) 
    ext wr landed
        rd permission
    pre PreRecordLanding(a,landed,permission)
    post landed = landed~ union {a};

    RecordTakeOff(a: Aircraft) 
    ext wr permission
        wr landed
    pre down(a,landed)
    post landed = landed~ \ {a} and
         permission = permission \ {a}; 

    NumberWaiting() r : nat
    ext wr permission
        wr landed
    post card (permission \ landed) = r
    
end Airport