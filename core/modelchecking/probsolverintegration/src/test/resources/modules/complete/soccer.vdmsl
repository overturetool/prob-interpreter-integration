module SOCCER_IMPL

imports from IO all
exports all

definitions
values gk_subs_max : nat1 = 1;
       fp_subs_max : nat1 = 2

types  player = nat1

state  R_Book of
         on_field_players : set of player
         potential_substitutes : set of player
         goalkeeper : player
         nb_gk_subs : nat
         nb_fp_subs : nat

inv mk_R_Book(ofp,ps,gk, ngk, nfp) == 
    (card ofp) <= 11 and 
    (ngk <= gk_subs_max) and (nfp <= fp_subs_max) and
    gk not in set ps and 
    ofp inter ps = {}

/*inv mk_R_Book(ofp,ps,gk, ngk, nfp) == 
    leq_eleven_players(ofp) and 
    within_allowed_limits(ngk,nfp) and
    gk not in set ps and 
    ofp inter ps = {}*/

init r == r = 
       mk_R_Book({1,2,3,4,5,6,7,8,9,10,11},
                 {12,13,14,15,16},1,0,0)

end

functions
leq_eleven_players : set of player +> bool
leq_eleven_players(f) == (card f) <= 11
   ;

within_allowed_limits : nat * nat +> bool
within_allowed_limits (ngk , nfp ) == 
     (ngk <= gk_subs_max) and (nfp <= fp_subs_max)

operations


RED_CARD (p : player)
ext wr on_field_players : set of player
    wr potential_substitutes : set of player
  pre p in set on_field_players or p in set potential_substitutes
  post on_field_players = on_field_players~ \ {p}
       and potential_substitutes = potential_substitutes~ \ {p}
      ;

CHANGE_GOALKEEPER (p : player)
ext wr goalkeeper : player
    rd on_field_players : set of player
      rd potential_substitutes : set of player --tmp fix
  pre p in set on_field_players
  post goalkeeper = p
      ;

SUBSTITUTION (pl : player, subs: player)
ext wr on_field_players : set of player
    wr potential_substitutes : set of player
    wr goalkeeper : player
    wr nb_gk_subs : nat
    wr nb_fp_subs : nat
  pre pl in set on_field_players and subs in set potential_substitutes
       and (pl = goalkeeper => within_allowed_limits(nb_gk_subs+1,nb_fp_subs))
       and (pl <> goalkeeper => within_allowed_limits(nb_gk_subs,nb_fp_subs+1))
  post on_field_players = on_field_players~ union {subs} \ {pl}
       and potential_substitutes = potential_substitutes~ \ {subs}
       and (pl = goalkeeper~ =>
           	 ((goalkeeper = subs) 
                 and (nb_gk_subs = nb_gk_subs~ +1 )
                 and (nb_fp_subs = nb_fp_subs~)))
       and (pl <> goalkeeper~ =>
                ((goalkeeper = goalkeeper~) 
                 and (nb_gk_subs = nb_gk_subs~)
                 and (nb_fp_subs = nb_fp_subs~ +1)))
;

SUBSTITUTION_GK (pl : player, subs: player)
ext wr on_field_players : set of player
    wr potential_substitutes : set of player
    wr goalkeeper : player
    wr nb_gk_subs : nat
    rd nb_fp_subs : nat
  pre pl in set on_field_players and subs in set potential_substitutes
       and pl = goalkeeper  and within_allowed_limits(nb_gk_subs+1,nb_fp_subs)
  post on_field_players = on_field_players~ union {subs} \ {pl}
       and potential_substitutes = potential_substitutes~ \ {subs}
       and goalkeeper = subs and nb_gk_subs = nb_gk_subs~ +1 
;

SUBSTITUTION_FP (pl : player, subs: player)
ext wr on_field_players : set of player
    wr potential_substitutes : set of player
    rd goalkeeper : player
    rd nb_gk_subs : nat
    wr nb_fp_subs : nat
  pre pl in set on_field_players and subs in set potential_substitutes
       and pl <> goalkeeper and within_allowed_limits(nb_gk_subs,nb_fp_subs+1)
  post on_field_players = on_field_players~ union {subs} \ {pl}
       and potential_substitutes = potential_substitutes~ \ {subs}
       and nb_fp_subs = nb_fp_subs~ +1
;

SUBSTITUTION_EXPL : player * player ==> ()
SUBSTITUTION_EXPL (pl , subs)
== if pl = goalkeeper then SUBSTITUTION_GK(pl,subs)
			else SUBSTITUTION_FP(pl,subs)
pre (pl = goalkeeper => 
          pre_SUBSTITUTION_GK(pl,subs,
                              mk_R_Book(on_field_players,potential_substitutes,
                                        goalkeeper,nb_gk_subs, nb_fp_subs)))
    and (pl <> goalkeeper => 
          pre_SUBSTITUTION_FP(pl,subs,
                              mk_R_Book(on_field_players,potential_substitutes,
                                        goalkeeper,nb_gk_subs,nb_fp_subs)));

test:() ==> R_Book
test() == (
 RED_CARD(1);
 SUBSTITUTION(10,12);
 SUBSTITUTION(2,13);
 SUBSTITUTION(3,14);
 return getState();
);


-- RED_CARD(1);
-- SUBSTITUTION(10,12)
-- SUBSTITUTION(2,13)
-- SUBSTITUTION(3,14)

test3:() ==> R_Book
test3() == (
 show();
 RED_CARD(1);
 show();
 CHANGE_GOALKEEPER(10);
 show();
 SUBSTITUTION(10,12);
 show();
 SUBSTITUTION(2,13);
 show();
 SUBSTITUTION(3,14);
 show();
 return getState();
 );
 
 getState:() ==> R_Book
 getState()== return mk_R_Book(on_field_players,potential_substitutes,goalkeeper,nb_gk_subs,nb_fp_subs);
 
 show : ()==>()
 show()==(
 IO`println(getState());
 );
 
 end SOCCER_IMPL 
 
 
 module IO
exports all
definitions

-- 	Overture STANDARD LIBRARY: INPUT/OUTPUT
--      --------------------------------------------
-- 
-- Standard library for the Overture Interpreter. When the interpreter
-- evaluates the preliminary functions/operations in this file,
-- corresponding internal functions is called instead of issuing a run
-- time error. Signatures should not be changed, as well as name of
-- module (VDM-SL) or class (VDM++). Pre/post conditions is 
-- fully user customisable. 
-- Dont care's may NOT be used in the parameter lists.
--
-- The in/out functions  will return false if an error occurs. In this
-- case an internal error string will be set (see 'ferror').
--
-- File path:
--  * An absolute path is accepted and used as specified.
--  * A relative path is relative to the debugger or if running in the 
--      Overture IDE relative to the project root.
--

types
 
/**
 * The file directive used in in/out functions.
 */
filedirective = <start>|<append> 

functions

/**
 * Write VDM value in ASCII format to the console.
 *
 * @param val the VDM value to be written
 * @return true if successful else false
 */
writeval[@p]: @p -> bool
writeval(val)==
  is not yet specified;

/**
 * Write VDM value in ASCII format to file. The type of the val must be
 * specified as fwriteval[seq of char](...) when calling the function.
 *
 * @param filename the name of the file
 * @param val the VDM value to be written.
 * @param fdir if <start> then it will overwrite an existing file, 
 *  else <append> will append output to the existing file
 * @return true if successful else false
 */
fwriteval[@p]:seq1 of char * @p * filedirective -> bool
fwriteval(filename,val,fdir) ==
  is not yet specified;

/**
 * Read VDM value in ASCII format from file. The type which should be read must be
 * specified as freadval[seq of char](...) when calling the function.
 *
 * @param filename the name of the file
 * @return mk_(success,@p) if successful success will be 
 * set to true else false. @p will hold nil if unsuccessful or the value read.
 */
freadval[@p]:seq1 of char -> bool * [@p]
freadval(filename) ==
  is not yet specified
  post let mk_(b,t) = RESULT in not b => t = nil;

operations

/**
 * Write text to std out. Surrounding double quotes will be stripped,
 * backslashed characters should be interpreted.
 *
 * @param text the text to write to the console
 * @return if successful true else false.
 */
echo: seq of char ==> bool
echo(text) ==
  fecho ("",text,nil);

/**
 * Write text to file like <code>echo</code>.
 *
 * @param filename the name of the file
 * @param text the text to write to be written.
 * @param fdir if nil or <start> then it will overwrite an existing file, 
 *  else <append> will append output to the existing file.
 * @return true if successful else false
 */
fecho: seq of char * seq of char * [filedirective] ==> bool
fecho (filename,text,fdir) ==
  is not yet specified
  pre filename = "" <=> fdir = nil;

/**
 * Returns the last error which may have occurred by any of the io/out functions
 *
 * @return the last error message
 */
ferror:()  ==> seq of char
ferror () ==
  is not yet specified;
  
-- New simplified format printing operations


/**
 * Prints any VDM value to the console
 *
 * @param arg a VDM value of any type
 */
print: ? ==> ()
print(arg) ==
    is not yet specified;

/**
 * Prints any VDM value to the console as a new line
 *
 * @param arg a VDM value of any type
 */
println: ? ==> ()
println(arg) ==
    is not yet specified;

/**
 * Prints any VDM value to the console
 *
 * @param format standard format string used in
 *  Java by <code>String.format(format, value)</code>,
 *  though note that only the %s conversion is supported.
 *  eg. <code>printf("Hello [%2$-5s][%1$5s]\n", [123, {2}])</code>
 *  would produce <code>Hello [{2}  ][  123]</code> and a newline.
 *
 * @param arg a sequence of VDM values of any type
 */
printf: seq of char * seq of ? ==> ()
printf(format, args) ==
    is not yet specified;

end IO
 