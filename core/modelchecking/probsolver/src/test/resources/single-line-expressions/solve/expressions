--
--
 r = a+b & a=1 & b=2
 r=a-b
--
--
 let x in set {78,2,3} in x --= set of nat
 ( 1 + ( 2  - 3 ) * 4 ) / 5
 -(1 ** (5 mod 3) + 0 )
 1+2
 1-2
 -3
 +5
 14 mod 3
 -14 mod 3
 14 mod -3
 -14 mod -3
 abs -3 
 abs 5 
 abs 0 
 true
 false
 {1} union {2,3}
 {1} \ {2,3}
 dom {1|->2, 3|->3}
 true and false
 1=1 and 2=2
 rng {1|->2, 3|->3}
 {1|->2, 3|->3} = {1|->2, 3|->3}
 {1|->2, 3|->3} <> {1|->2, 3|->3}
 { }
 dunion({{1,2},{2,3,4},{1,5}}) 
 dinter({{1,2},{2,3,4},{1,5}}) 
 {1, 2, 3}
 1 in set {1,2}
 2 in set {1,2,3}
 1 not in set {1,2}
 len ([1,2,3] ^ [2,4])
 elems [[10,20],[30],[10,20], [40,50,60]]
 elems [[10,20],[30],[40,50,60]]
 elems [10,20,30,40]
 elems [3,1,4,1,5,9,2]
 [10,20,30,40,50](2)
 [10,20,30,40,50](len([1,2]^[3]))
 inds [1,2,3]
 elems [1,2,3]
 reverse ([1,2,3])
 let x in set {0,1,2,3} in x --= set of nat
 {0,1,2,3} = set of nat1
 { x*y | x in set {1,2,3,4} , y in set {1,2} & x + y <= 3}
 { x+y | x in set {1,2,3,4} , y in set {-1,0,1} & x + y <= 3}  -- translated expression not interpreted?(10/23)
 { x | x in set {1,2,3} & x = 1 }
 forall a,b in set {1,2,3} &  a > 2
 forall a in set {1,2,3}, b in set {3,4} & a + b > 2
 -> ProB !(a,b).(a : {1, 2, 3} & b : {3, 4} => a + b > 2)
 exists1 a in set {1,2,3} & a = 1
 -- card({x | #a.(a : {1, 2, 3} & a = 1 & x=a)})=1
 exists a,b,c in set {1,2,3} &  a > 2
 (forall f:(@elem -> @elem), l:seq of (@elem) & (not (l = []) => m[@elem](f, l) > m[@elem](f, (tl l))))  -- not done
 if true then (return 1) else (return 2)
 if 1=1 then 1 else 0
 if 1=0 then 1 else 0
 if true and false then 1+2 else 0+4
 if (1=1) and (2=1) then 1+2 else 0+4
 if (1=1) and (2=1) then 1=2 else 0+4
 if true then 1 else (3 * (3-1))
 if true then 1+2 elseif false then 2+3 elseif 4=5 then 6+7 else 3+4
Europe = { "France", "England", "Denmark", "Spain" }
 m1 = { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }
 m2 = { 1|-> 2, 2|->3, 3|->4, 4|->1 }
 m3 = { "England" |-> 3 }
 m4 = { "France"|-> 8, "England" |-> 4 }
 dom( { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 })
 rng( { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 })
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } munion { "England" |-> 3 }
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } ++ { "France"|-> 8, "England" |-> 4 }
 merge {{ "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 },{ "England" |-> 3 },{ "France"|-> 8, "England" |-> 4 }}
 { "France", "England", "Denmark", "Spain" } <: { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }
 { "France", "England", "Denmark", "Spain" } <-: { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } :> { 1, 2 }
{ "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } :-> { 1, 2 }
 merge( {{ "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 },{ "England" |-> 3 },{ "France"|-> 8, "England" |-> 4 }})
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }("Denmark")
 len([2]^[3])
 [1,2,3](len ([3]^[2]))
 ["France", "England", "Denmark", "Spain" ] ++ { 2|->"Italy", 4|->"Ireland" }
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } comp ( { "FRANCE"|-> "France" } )
 { 1|-> 2, 2|->3, 3|->4, 4|->1 } ** 3 
 map_inter: (map nat to nat) * (map nat to nat) -> map nat to nat
 { 1|-> 2, 2|->3, 3|->4, 4|->1 } comp (inverse { 1|-> 2, 2|->3, 3|->4, 4|->1 })
 (lambda n : nat & n + 1)(11)
 --> %n.(n : NAT | n + 1)
 lambda a : nat , b : nat & a + b
 lambda a : nat & lambda b : nat & a + b
 lambda n in set {1,2,3} & n + 1
 lambda a : {1,2,3} , b : {10,20,30} & a + b
 lambda a : {1,2,3} & lambda b : {10,20,30} & a + b
 f1 = lambda x : nat & lambda y : nat & x + y -- Unable to type check expression: f1 = lambda x : nat & lambda y : nat & x + y
 map_inter: (map nat to nat) * (map nat to nat) -> map nat to nat -- Unable to type check expression: map_inter: (map nat to nat) * (map nat to nat) -> map nat to nat
 map_inter (m1, m2) ==
   (dom m1 inter dom m2) <: m1
  pre forall d in set dom m1 inter dom m2 & m1(d) = m2(d)
 ["a", "b", "c"](2)
 [[1,2],[3,4],[1,2,3]](2)
 let a = 1, b = 2 in a + b -- under construction
 let a in set dom {1,2,3} be st { -- under construction
 exists1 a in set {1,2,3} & a > 2
mk_(1,2)
 mk_(1,2,3)
 mk_("a", 1, "b", 2)
 mk_("a", "b", 1 , 2) # 2
 mk_Score(10, 3,0,0,9) -- unable to type check
 let sc1 = mk_(1,2,3) in set {(1,2,3), (1,2,3), (1,2,3)} -- unable to parse expression
 cases {}: {} -> [], {x} -> [x] end  -- unable to type check expression
