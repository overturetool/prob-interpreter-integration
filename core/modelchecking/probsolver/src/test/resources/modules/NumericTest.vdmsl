operations

--    complessthan() r : bool
--      post 1<2 = r

--    add() r : nat
--    post r = 4 + 1

--    sub() r : nat
--    post 4 - 1 = r;

--    times() r : nat
--    post 3*2 = r;

--    div() r : nat
--    post 5/3=r;

--     calc() r : nat
--    post (1+2)*3/4 = r;
--    post 1+2*3/4 = r;

--    rev() r : nat
--    post -1 = r;
--    post -(-1) = r;

-- -- under construction
--    complessthan() r : bool
--    post true = r;
--    post 1<=2 = r;
--    post 2<=2 = r;

-- -- operator ** for NumericExps
--  pow() r : nat
--  post 2 ** 3 = r;

--  noteq() r : nat
--    post 1<>2 => r=2

--  noteq() r : nat
--    post 1<>1 => r=2

--  modulo() n : nat
--    post n = 5 mod 3;

  quall() mx : nat1
    post forall n in set {1,3,2,4} & mx>=n
