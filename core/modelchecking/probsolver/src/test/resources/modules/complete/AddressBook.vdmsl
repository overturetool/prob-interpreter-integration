state AddressBook of
  book: map Name to Address
  init s == s = mk_AddressBook({|->})
end

types
Name = nat;
Address = nat

operations
  SAddressBook(name: Name, address: Address)
    ext wr book: map Name to Address
    pre name not in set dom(book)
    post book = book~ munion { name |-> address }
  ;

  FindAddress(name: Name) r : Address
    ext rd book: map Name to Address
    pre name in set dom(book)
    post r = book(name)
  ;

test:() ==> Address
test() == let n1 = 1, a1 = 101, 
              n2 = 2, a2 = 102, n = 3 in (
  SAddressBook(n1, a1);
  SAddressBook(n2, a2);
  return FindAddress(n);
  -- return mk_AddressBook(book);
);
