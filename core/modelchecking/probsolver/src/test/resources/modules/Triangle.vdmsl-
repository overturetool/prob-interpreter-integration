-- state TriangleEx of
--  t : seq of nat
--  inv t == (len t = 3) and (forall i in set elems t & 2 * i < sum(i))
-- end

types
  Triangle = seq of nat
    inv t == (len t = 3) and (forall i in set elems t & 2 * i < sum(t));
  TriangleType = <SCALENE> | <ISOSCELES> | <EQUILATERAL> | <INVALID>;

functions
  sum : seq of nat -> nat
  sum(t) == if t = [] then 0 else hd t + sum(tl t);
      
  classify : seq of nat -> TriangleType
  classify(sides) == if is_Triangle(sides) then variety(sides) else <INVALID>;

  variety : seq of nat -> TriangleType
  variety(sides) == cases card(elems sides) :
                      1 -> <EQUILATERAL>,
                      2 -> <ISOSCELES>,
                      3 -> <SCALENE>
                    end

 operations
--   MAX(a, b)
--    wr max : nat
--    post (max=a and max=b) or (max=a and max>b) or (max>a and max=b)

  CHARACTERISATION(sides : seq of nat) type : TriangleType
    post type = classify(sides);

  test: () ==> TriangleType
  test() == let t = [2,2,2] in CHARACTERISATION(t);

--  test:() ==> Airport
--  test() == let plane1 = 7 in
-- (	 
-- 	Init();
-- 	GivePermission(plane1);
-- 	RecordLanding(plane1);
-- 	RecordTakeOff(plane1);
-- 	let n = NumberWaiting()
-- 		in skip;
-- 	return mk_Airport(permission,landed);
-- );
-- 	 
--     GivePermission(a : Aircraft) 
--     ext wr permission
--     pre not permitted(a,permission)
--     post permission = permission~ union {a};
--     
-- 
--     RecordLanding(a: Aircraft) 
--     ext wr landed
--         rd permission
--     pre PreRecordLanding(a,landed,permission)
--     post landed = landed~ union {a};
-- 
--     RecordTakeOff(a: Aircraft) 
--     ext wr permission
--         wr landed
--     pre down(a,landed)
--     post landed = landed~ \ {a} and
--          permission = permission \ {a}; 
-- 
--     NumberWaiting() r : nat
--     ext wr permission
--         wr landed
--     post card (permission \ landed) = r
