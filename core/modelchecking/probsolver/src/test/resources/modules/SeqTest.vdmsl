--
-- SeqTest.vdmsl
--
operations

--  seqtest: () ==> seq of nat
--  seqtest() == let n in set { [], [1], [1,2] } in 
--  (
--    isempty(n);
    
--  );

--  retseq() s : seq of nat
    -- post s = []
    -- post s = [1]
    -- post s = [1,2]
    -- post s = [1,[2,3],4] -- dose not solve
    -- post s = [1,2,2,1]

    -- gethead() e : nat
    --  post e = hd [3,1,4,1,5]

    -- gethead() e : seq of nat
    --   post e = hd [[3,1],[4],[1,5]]

    -- getlast() e : seq of nat
    --  post e = tl [3,1,4,1,5]

--    getlast() e : seq of seq of nat -- BtoVdimConverter.converter error
--      post e = tl [[3,1],[4],[1,5]]  -- error converting result expression

-- getlen() n : nat
--   post n = len [1,2,3];

-- getlen() n : nat
--  post n = len [[1,1,1],[2],[1,3]]

 
 concseq()  n : seq of nat
  post n = [1,2] ^ [2,4];  

interval() n : set of nat1
   post n = inds [2,3,4,5];
   
elements() n : set of nat
  post n = elems [1,2,3,1,2];

absolute() n : nat
  post n = abs 3;

elements0() n : set of nat
  post n = elems [];
--  revseq() n : seq of nat
--    post n = reverse [1,2,3]

-- power() n : set of set of nat -- can not be read
--    post n = power {1,2,3}; -- ??

-- concseq2()  n : seq of seq of nat
--  post n = [[1,11],[2]] ^ [[2,4]]   -- error converting result expression

-- getrev() n : seq of seq of nat
--  post n = reverse [[1,1,1],[2],[1,3]]

-- eqseq1() n : nat
--   post [1,2] = [1,2] => n= len [1,2];

-- eqseq2() n : nat
--   post [1,2] = [1,3] => n= len [1,2];

-- neqseq1() n : nat
--   post [1,2] <> [1,2] => n=0;

--seqapp() m : nat
--  post m = [10,20,30,40](3);
  
--neqseq1() n : nat
--  post [1,2] <> [1,3] => n=1
