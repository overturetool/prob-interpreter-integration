 ( 1 + ( 2  - 3 ) * 4 ) / 5
 -(1 ** (5 mod 3) + 0 )
 1+2
 1-2
 -3
 --+5
 14 mod 3
 -14 mod 3
 14 mod -3
 -14 mod -3
 abs -3 
 abs 5 
 abs 0 
 true
 false
 {1} union {2,3}
 {1} \ {2,3}
 dom {1|->2, 3|->3}
 true and false
 1=1 and 2=2
 rng {1|->2, 3|->3}
 {1|->2, 3|->3} = {1|->2, 3|->3}
 {1|->2, 3|->3} <> {1|->2, 3|->3}
 { }
 dunion({{1,2},{2,3,4},{1,5}}) 
 dinter({{1,2},{2,3,4},{1,5}}) 
 {1, 2, 3}
 1 in set {1,2}
 2 in set {1,2,3}
 1 not in set {1,2}
 len ([1,2,3] ^ [2,4])
 elems [[10,20],[30],[10,20], [40,50,60]]
 elems [[10,20],[30],[40,50,60]]
 elems [10,20,30,40]
 elems [3,1,4,1,5,9,2]
 [10,20,30,40,50](2)
 [10,20,30,40,50](len([1,2]^[3]))
 inds [1,2,3]
 elems [1,2,3]
 reverse ([1,2,3])
 --let x in set {0,1,2,3} in x 
 { x*y | x in set {1,2,3,4} , y in set {1,2} & x + y <= 3}
 { x+y | x in set {1,2,3,4} , y in set {-1,0,1} & x + y <= 3}  -- translated expression not interpreted?(10/23)
 { x | x in set {1,2,3} & x = 1 }
 forall a,b in set {1,2,3} &  a > 2
 forall a in set {1,2,3}, b in set {3,4} & a + b > 2
 exists1 a in set {1,2,3} & a = 1
 exists a,b,c in set {1,2,3} &  a > 2
 Europe = { "France", "England", "Denmark", "Spain" }
 m1 = { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }
 m2 = { 1|-> 2, 2|->3, 3|->4, 4|->1 }
 m3 = { "England" |-> 3 }
 m4 = { "France"|-> 8, "England" |-> 4 }
 dom( { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 })
 rng( { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 })
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } munion { "England" |-> 3 }
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } ++ { "France"|-> 8, "England" |-> 4 }
-- merge {{ "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 },{ "England" |-> 3 },{ "France"|-> 8, "England" |-> 4 }}
 { "France", "England", "Denmark", "Spain" } <: { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }
 { "France", "England", "Denmark", "Spain" } <-: { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } :> { 1, 2 }
{ "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } :-> { 1, 2 }
 --merge( {{ "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 },{ "England" |-> 3 },{ "France"|-> 8, "England" |-> 4 }})
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 }("Denmark")
 len([2]^[3])
 [1,2,3](len ([3]^[2]))
 ["France", "England", "Denmark", "Spain" ] ++ { 2|->"Italy", 4|->"Ireland" }
 { "France" |-> 9, "Denmark" |-> 4, "SouthAfrica" |-> 2, "SaudiArabia" |-> 1 } comp ( { "FRANCE"|-> "France" } )
 { 1|-> 2, 2|->3, 3|->4, 4|->1 } ** 3 
  { 1|-> 2, 2|->3, 3|->4, 4|->1 } comp (inverse { 1|-> 2, 2|->3, 3|->4, 4|->1 })
  ["a", "b", "c"](2)
 [[1,2],[3,4],[1,2,3]](2)
-- let a = 1, b = 2 in a + b 
 exists1 a in set {1,2,3} & a > 2
mk_(1,2)
 mk_(1,2,3)
 mk_("a", 1, "b", 2)
 mk_("a", "b", 1 , 2) # 2
--  cases {}: {} -> [], {x} -> [x] end  -- unable to type check expression
