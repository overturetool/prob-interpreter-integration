functions

compare(a:token , b : token) r:bool
pre true
post r=b=a;

compare2(a:int, b : int) r:bool
pre true
post r=mk_token(b)=mk_token(a);

compareGeneric(a:?, b : ?) r:bool
pre true
post r=mk_token(b)=mk_token(a);

test: ()->bool
test()== 
/*
let a = mk_token(1),
		b = mk_token(1)
		in
			compare(a,b);*/
let tests = { 	mk_(1,1),
		--		mk_('c','c'),
			--	mk_("kkk","kkk"),
				mk_(true,true),
				--mk_({},{}),
				mk_({1},{1}),
				mk_({1,2},{2,1})
			},
	badTests={ 	mk_(2,1),
		--		mk_('c','c'),
			--	mk_("kkk","kkk"),
				mk_(false,true),
				mk_({},4),
				mk_({1},{5}),
				mk_({1,2},{2,1,4})
			}
in
	forall p in set tests & compareGeneric(p.#1,p.#2) and not forall p in set badTests & compareGeneric(p.#1,p.#2);
			